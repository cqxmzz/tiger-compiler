
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 01 02:52:50 CST 2012
//----------------------------------------------------

package javac.parser;

import java.io.InputStream;
import javac.absyn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 01 02:52:50 CST 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\005\000\002\005\007\000\002\005\006\000" +
    "\002\006\007\000\002\007\003\000\002\007\004\000\002" +
    "\010\007\000\002\010\006\000\002\011\003\000\002\011" +
    "\005\000\002\012\004\000\002\013\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\004\000\002\015\003\000\002\015\005\000\002" +
    "\016\003\000\002\016\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\005\000\002\020\004\000\002\021\004\000" +
    "\002\022\007\000\002\022\011\000\002\023\007\000\002" +
    "\023\011\000\002\023\010\000\002\023\011\000\002\023" +
    "\010\000\002\023\011\000\002\023\010\000\002\023\011" +
    "\000\002\023\010\000\002\024\005\000\002\024\004\000" +
    "\002\024\004\000\002\025\003\000\002\025\005\000\002" +
    "\026\003\000\002\026\005\000\002\027\003\000\002\027" +
    "\005\000\002\030\003\000\002\030\005\000\002\031\003" +
    "\000\002\031\005\000\002\031\005\000\002\032\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\033\003\000\002\033\005\000\002\033" +
    "\005\000\002\034\003\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\035\003\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\036\003\000\002\036\006\000\002\036\006\000\002\036" +
    "\005\000\002\036\005\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\005\000\002\037\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\016\004\007\005\010\007\004\010\011\011" +
    "\020\054\014\001\002\000\010\030\uffef\032\uffef\054\uffef" +
    "\001\002\000\004\023\054\001\002\000\020\002\ufffe\004" +
    "\ufffe\005\ufffe\007\ufffe\010\ufffe\011\ufffe\054\ufffe\001\002" +
    "\000\012\007\004\010\011\011\020\054\014\001\002\000" +
    "\004\054\036\001\002\000\010\030\uffee\032\uffee\054\uffee" +
    "\001\002\000\020\002\034\004\007\005\010\007\004\010" +
    "\011\011\020\054\014\001\002\000\020\002\ufffd\004\ufffd" +
    "\005\ufffd\007\ufffd\010\ufffd\011\ufffd\054\ufffd\001\002\000" +
    "\006\032\uffec\054\uffec\001\002\000\006\032\022\054\021" +
    "\001\002\000\020\002\ufffc\004\ufffc\005\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\054\ufffc\001\002\000\020\002\000\004\000" +
    "\005\000\007\000\010\000\011\000\054\000\001\002\000" +
    "\010\030\uffed\032\uffed\054\uffed\001\002\000\004\025\023" +
    "\001\002\000\010\030\uffeb\032\uffeb\054\uffeb\001\002\000" +
    "\014\007\004\010\011\011\020\026\025\054\014\001\002" +
    "\000\006\026\ufff3\027\ufff3\001\002\000\006\022\ufff4\023" +
    "\ufff4\001\002\000\006\026\032\027\031\001\002\000\006" +
    "\032\022\054\030\001\002\000\006\026\ufff1\027\ufff1\001" +
    "\002\000\012\007\004\010\011\011\020\054\014\001\002" +
    "\000\006\022\ufff5\023\ufff5\001\002\000\006\026\ufff2\027" +
    "\ufff2\001\002\000\004\002\001\001\002\000\020\002\uffff" +
    "\004\uffff\005\uffff\007\uffff\010\uffff\011\uffff\054\uffff\001" +
    "\002\000\004\023\037\001\002\000\012\007\004\010\011" +
    "\011\020\054\014\001\002\000\054\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\044\ufff7\045" +
    "\ufff7\051\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002" +
    "\000\014\007\004\010\011\011\020\024\051\054\014\001" +
    "\002\000\006\032\022\054\043\001\002\000\006\022\uffea" +
    "\027\uffea\001\002\000\006\022\046\027\045\001\002\000" +
    "\004\054\047\001\002\000\054\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\023\ufff0\024\ufff0\025\ufff0\044\ufff0\045\ufff0" +
    "\051\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002\000" +
    "\006\022\uffe9\027\uffe9\001\002\000\054\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\044\ufff6" +
    "\045\ufff6\051\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\001" +
    "\002\000\020\002\ufff8\004\ufff8\005\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\054\ufff8\001\002\000\004\022\053\001\002\000" +
    "\020\002\ufffb\004\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\054\ufffb\001\002\000\052\006\105\007\004\010\011\011" +
    "\020\012\110\013\077\015\115\016\063\017\101\020\111" +
    "\021\060\023\114\025\057\044\076\045\064\051\067\053" +
    "\056\054\100\055\055\056\065\001\002\000\054\022\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\052" +
    "\uffab\001\002\000\054\022\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\052\uffad\001\002\000\026\006" +
    "\105\012\110\025\057\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\004\022\262\001" +
    "\002\000\050\006\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\044\uffe4\045\uffe4\051\uffe4\053\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\001\002\000\036\022\uffc5\026\uffc5\027\uffc5\031" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\146\045\147\001\002\000\004\025" +
    "\227\001\002\000\026\006\105\012\110\025\057\044\076" +
    "\045\064\051\067\053\056\054\123\055\055\056\065\001" +
    "\002\000\054\022\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\052\uffac\001\002\000\016\022\uffcc\026" +
    "\uffcc\027\uffcc\031\uffcc\034\uffcc\035\170\001\002\000\026" +
    "\006\105\012\110\025\057\044\076\045\064\051\067\053" +
    "\056\054\123\055\055\056\065\001\002\000\046\022\uffbd" +
    "\026\uffbd\027\uffbd\031\uffbd\033\223\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\050\uffbd\001\002\000\052\006" +
    "\105\007\004\010\011\011\020\012\110\013\077\015\115" +
    "\016\063\017\101\020\111\021\060\023\114\025\057\044" +
    "\076\045\064\051\067\053\056\054\100\055\055\056\065" +
    "\001\002\000\054\022\uffb9\025\210\026\uffb9\027\uffb9\030" +
    "\211\031\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\052\212\001\002\000\050\006\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\044\uffe2\045\uffe2" +
    "\051\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002\000" +
    "\050\006\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\044" +
    "\uffe6\045\uffe6\051\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\001\002\000\054\022\uffb4\025\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\052\uffb4\001\002\000\026\006\105" +
    "\012\110\025\057\044\076\045\064\051\067\053\056\054" +
    "\123\055\055\056\065\001\002\000\004\025\201\001\002" +
    "\000\054\022\uffaf\025\uffaf\027\uffaf\030\uffaf\032\uffec\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\052\uffaf\054\uffec\001\002\000\026\006\105\012\110" +
    "\025\057\044\076\045\064\051\067\053\056\054\123\055" +
    "\055\056\065\001\002\000\012\022\uffd0\026\uffd0\027\uffd0" +
    "\031\uffd0\001\002\000\032\022\uffc8\026\uffc8\027\uffc8\031" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\143\041\142" +
    "\042\141\043\144\001\002\000\050\006\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\044\uffe5\045\uffe5\051\uffe5\053" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000\012\007\004" +
    "\010\011\011\020\054\172\001\002\000\014\022\uffce\026" +
    "\uffce\027\uffce\031\uffce\034\166\001\002\000\044\022\uffc0" +
    "\026\uffc0\027\uffc0\031\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\153\047\152\050\151\001\002\000\054\022\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\052\uffae" +
    "\001\002\000\004\022\165\001\002\000\046\006\105\012" +
    "\110\013\077\015\115\016\063\017\101\020\111\021\060" +
    "\023\114\024\164\025\057\044\076\045\064\051\067\053" +
    "\056\054\123\055\055\056\065\001\002\000\022\022\uffca" +
    "\026\uffca\027\uffca\031\uffca\034\uffca\035\uffca\036\135\037" +
    "\136\001\002\000\046\006\105\012\110\013\077\015\115" +
    "\016\063\017\101\020\111\021\060\023\114\024\132\025" +
    "\057\044\076\045\064\051\067\053\056\054\123\055\055" +
    "\056\065\001\002\000\004\025\125\001\002\000\006\022" +
    "\122\027\121\001\002\000\050\006\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\044\uffe3\045\uffe3\051\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\001\002\000\046\006\uffe8\012" +
    "\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\044\uffe8\045\uffe8\051\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\026\006\105" +
    "\012\110\025\057\044\076\045\064\051\067\053\056\054" +
    "\123\055\055\056\065\001\002\000\054\006\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\044\uffdf" +
    "\045\uffdf\051\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\001" +
    "\002\000\054\022\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\052\uffaf\001\002\000\012\022\uffcf\026" +
    "\uffcf\027\uffcf\031\uffcf\001\002\000\026\006\105\012\110" +
    "\025\057\044\076\045\064\051\067\053\056\054\123\055" +
    "\055\056\065\001\002\000\006\026\127\027\121\001\002" +
    "\000\044\006\105\012\110\013\077\015\115\016\063\017" +
    "\101\020\111\021\060\023\114\025\057\044\076\045\064" +
    "\051\067\053\056\054\123\055\055\056\065\001\002\000" +
    "\050\006\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\044" +
    "\uffdc\045\uffdc\051\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\001\002\000\046\006\105\012\110\013\077\015\115\016" +
    "\063\017\101\020\111\021\060\023\114\024\133\025\057" +
    "\044\076\045\064\051\067\053\056\054\123\055\055\056" +
    "\065\001\002\000\050\006\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\044\uffe0\045\uffe0\051\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\001\002\000\050\006\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\044\uffe1\045\uffe1\051\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000\046\006\uffe7" +
    "\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\044\uffe7\045\uffe7\051\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002\000\026\006" +
    "\105\012\110\025\057\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\026\006\105\012" +
    "\110\025\057\044\076\045\064\051\067\053\056\054\123" +
    "\055\055\056\065\001\002\000\032\022\uffc6\026\uffc6\027" +
    "\uffc6\031\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\143" +
    "\041\142\042\141\043\144\001\002\000\044\022\uffbd\026" +
    "\uffbd\027\uffbd\031\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\001\002\000\026\006\105\012\110" +
    "\025\057\044\076\045\064\051\067\053\056\054\123\055" +
    "\055\056\065\001\002\000\026\006\105\012\110\025\057" +
    "\044\076\045\064\051\067\053\056\054\123\055\055\056" +
    "\065\001\002\000\026\006\105\012\110\025\057\044\076" +
    "\045\064\051\067\053\056\054\123\055\055\056\065\001" +
    "\002\000\026\006\105\012\110\025\057\044\076\045\064" +
    "\051\067\053\056\054\123\055\055\056\065\001\002\000" +
    "\036\022\uffc1\026\uffc1\027\uffc1\031\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\146\045\147\001\002\000\026\006\105\012\110\025\057" +
    "\044\076\045\064\051\067\053\056\054\123\055\055\056" +
    "\065\001\002\000\026\006\105\012\110\025\057\044\076" +
    "\045\064\051\067\053\056\054\123\055\055\056\065\001" +
    "\002\000\044\022\uffbe\026\uffbe\027\uffbe\031\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\153\047\152\050\151\001\002" +
    "\000\026\006\105\012\110\025\057\044\076\045\064\051" +
    "\067\053\056\054\123\055\055\056\065\001\002\000\026" +
    "\006\105\012\110\025\057\044\076\045\064\051\067\053" +
    "\056\054\123\055\055\056\065\001\002\000\026\006\105" +
    "\012\110\025\057\044\076\045\064\051\067\053\056\054" +
    "\123\055\055\056\065\001\002\000\044\022\uffbc\026\uffbc" +
    "\027\uffbc\031\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\001\002\000\044\022\uffbb\026\uffbb\027" +
    "\uffbb\031\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\001\002\000\044\022\uffba\026\uffba\027\uffba" +
    "\031\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\001\002\000\044\022\uffbf\026\uffbf\027\uffbf\031" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\153\047\152\050" +
    "\151\001\002\000\036\022\uffc4\026\uffc4\027\uffc4\031\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\146\045\147\001\002\000\036\022\uffc3" +
    "\026\uffc3\027\uffc3\031\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\146\045\147" +
    "\001\002\000\036\022\uffc2\026\uffc2\027\uffc2\031\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\146\045\147\001\002\000\032\022\uffc7\026" +
    "\uffc7\027\uffc7\031\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\143\041\142\042\141\043\144\001\002\000\020\002" +
    "\ufff9\004\ufff9\005\ufff9\007\ufff9\010\ufff9\011\ufff9\054\ufff9" +
    "\001\002\000\050\006\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\044\uffd2\045\uffd2\051\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\001\002\000\026\006\105\012\110\025\057" +
    "\044\076\045\064\051\067\053\056\054\123\055\055\056" +
    "\065\001\002\000\016\022\uffcb\026\uffcb\027\uffcb\031\uffcb" +
    "\034\uffcb\035\170\001\002\000\026\006\105\012\110\025" +
    "\057\044\076\045\064\051\067\053\056\054\123\055\055" +
    "\056\065\001\002\000\022\022\uffc9\026\uffc9\027\uffc9\031" +
    "\uffc9\034\uffc9\035\uffc9\036\135\037\136\001\002\000\052" +
    "\022\uffb8\026\uffb8\027\uffb8\030\uffec\031\uffb8\032\uffec\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\001\002\000\006\030\174\032\022\001\002\000\026" +
    "\006\105\012\110\025\057\044\076\045\064\051\067\053" +
    "\056\054\123\055\055\056\065\001\002\000\006\027\121" +
    "\031\176\001\002\000\054\022\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\052\uffa9\001\002\000\006" +
    "\022\200\027\121\001\002\000\050\006\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\044\uffd3\045\uffd3\051\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\056\uffd3\001\002\000\026\006\105" +
    "\012\110\025\057\044\076\045\064\051\067\053\056\054" +
    "\123\055\055\056\065\001\002\000\006\026\203\027\121" +
    "\001\002\000\044\006\105\012\110\013\077\015\115\016" +
    "\063\017\101\020\111\021\060\023\114\025\057\044\076" +
    "\045\064\051\067\053\056\054\123\055\055\056\065\001" +
    "\002\000\050\006\uffde\012\uffde\013\uffde\014\205\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\024\uffde\025" +
    "\uffde\044\uffde\045\uffde\051\uffde\053\uffde\054\uffde\055\uffde" +
    "\056\uffde\001\002\000\044\006\105\012\110\013\077\015" +
    "\115\016\063\017\101\020\111\021\060\023\114\025\057" +
    "\044\076\045\064\051\067\053\056\054\123\055\055\056" +
    "\065\001\002\000\050\006\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\044\uffdd\045\uffdd\051\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\001\002\000\046\022\uffb7\026\uffb7\027" +
    "\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\001\002\000\030\006\105\012\110" +
    "\025\057\026\217\044\076\045\064\051\067\053\056\054" +
    "\123\055\055\056\065\001\002\000\026\006\105\012\110" +
    "\025\057\044\076\045\064\051\067\053\056\054\123\055" +
    "\055\056\065\001\002\000\004\054\213\001\002\000\054" +
    "\022\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\052\uffb0\001\002\000\006\027\121\031\215\001\002" +
    "\000\054\022\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\052\uffb3\001\002\000\006\026\220\027\121" +
    "\001\002\000\054\022\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\052\uffb1\001\002\000\054\022\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\052" +
    "\uffb2\001\002\000\046\006\105\012\110\013\077\015\115" +
    "\016\063\017\101\020\111\021\060\023\114\024\222\025" +
    "\057\044\076\045\064\051\067\053\056\054\123\055\055" +
    "\056\065\001\002\000\020\002\ufffa\004\ufffa\005\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\054\ufffa\001\002\000\026\006\105" +
    "\012\110\025\057\044\076\045\064\051\067\053\056\054" +
    "\123\055\055\056\065\001\002\000\012\022\uffcd\026\uffcd" +
    "\027\uffcd\031\uffcd\001\002\000\046\022\uffb5\026\uffb5\027" +
    "\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\001\002\000\046\022\uffb6\026\uffb6" +
    "\027\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\001\002\000\030\006\105\012" +
    "\110\022\230\025\057\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\030\006\105\012" +
    "\110\022\246\025\057\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\030\006\105\012" +
    "\110\022\232\025\057\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\030\006\105\012" +
    "\110\025\057\026\242\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\030\006\105\012" +
    "\110\025\057\026\235\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\006\026\237\027" +
    "\121\001\002\000\044\006\105\012\110\013\077\015\115" +
    "\016\063\017\101\020\111\021\060\023\114\025\057\044" +
    "\076\045\064\051\067\053\056\054\123\055\055\056\065" +
    "\001\002\000\050\006\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024\uffda" +
    "\025\uffda\044\uffda\045\uffda\051\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\001\002\000\044\006\105\012\110\013\077" +
    "\015\115\016\063\017\101\020\111\021\060\023\114\025" +
    "\057\044\076\045\064\051\067\053\056\054\123\055\055" +
    "\056\065\001\002\000\050\006\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\044\uffdb\045\uffdb\051\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\001\002\000\006\026\244\027\121" +
    "\001\002\000\044\006\105\012\110\013\077\015\115\016" +
    "\063\017\101\020\111\021\060\023\114\025\057\044\076" +
    "\045\064\051\067\053\056\054\123\055\055\056\065\001" +
    "\002\000\050\006\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\044\uffd8\045\uffd8\051\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\001\002\000\044\006\105\012\110\013\077\015" +
    "\115\016\063\017\101\020\111\021\060\023\114\025\057" +
    "\044\076\045\064\051\067\053\056\054\123\055\055\056" +
    "\065\001\002\000\050\006\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\044\uffd9\045\uffd9\051\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\001\002\000\030\006\105\012\110\025" +
    "\057\026\256\044\076\045\064\051\067\053\056\054\123" +
    "\055\055\056\065\001\002\000\030\006\105\012\110\025" +
    "\057\026\251\044\076\045\064\051\067\053\056\054\123" +
    "\055\055\056\065\001\002\000\006\026\253\027\121\001" +
    "\002\000\044\006\105\012\110\013\077\015\115\016\063" +
    "\017\101\020\111\021\060\023\114\025\057\044\076\045" +
    "\064\051\067\053\056\054\123\055\055\056\065\001\002" +
    "\000\050\006\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\044\uffd6\045\uffd6\051\uffd6\053\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\001\002\000\044\006\105\012\110\013\077\015\115" +
    "\016\063\017\101\020\111\021\060\023\114\025\057\044" +
    "\076\045\064\051\067\053\056\054\123\055\055\056\065" +
    "\001\002\000\050\006\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\044\uffd7\045\uffd7\051\uffd7\053\uffd7\054\uffd7\055" +
    "\uffd7\056\uffd7\001\002\000\006\026\260\027\121\001\002" +
    "\000\044\006\105\012\110\013\077\015\115\016\063\017" +
    "\101\020\111\021\060\023\114\025\057\044\076\045\064" +
    "\051\067\053\056\054\123\055\055\056\065\001\002\000" +
    "\050\006\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\044" +
    "\uffd4\045\uffd4\051\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\001\002\000\044\006\105\012\110\013\077\015\115\016" +
    "\063\017\101\020\111\021\060\023\114\025\057\044\076" +
    "\045\064\051\067\053\056\054\123\055\055\056\065\001" +
    "\002\000\050\006\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\044\uffd5\045\uffd5\051\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\001\002\000\050\006\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\044\uffd1\045\uffd1\051\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\001\002\000\006\026\264\027\121" +
    "\001\002\000\054\022\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\052\uffaa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\020\002\011\003\016\004\005\005\012\006" +
    "\015\010\004\014\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\051\014\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\034" +
    "\004\005\005\012\006\015\010\004\014\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\025\012\023\014\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\032" +
    "\014\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\040\013\037\014\041\001\001\000\002\001\001\000" +
    "\006\013\047\014\041\001\001\000\004\015\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\007" +
    "\070\013\037\014\041\016\111\017\117\020\073\021\103" +
    "\022\060\023\116\024\072\025\115\026\101\027\105\030" +
    "\065\031\112\032\102\033\061\034\106\035\067\036\071" +
    "\037\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\025\262\026\101\027\105\030\065\031\112\032\102" +
    "\033\061\034\106\035\067\036\071\037\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\035\225\036\071\037\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\035\224\036\071" +
    "\037\074\001\001\000\002\001\001\000\052\013\047\014" +
    "\041\016\220\017\117\020\073\021\103\022\060\023\116" +
    "\024\072\025\115\026\101\027\105\030\065\031\112\032" +
    "\102\033\061\034\106\035\067\036\071\037\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\035\206\036\071\037\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\025\176\026" +
    "\101\027\105\030\065\031\112\032\102\033\061\034\106" +
    "\035\067\036\071\037\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\017\133\020\073\021\103\022\060" +
    "\023\116\024\072\025\115\026\101\027\105\030\065\031" +
    "\112\032\102\033\061\034\106\035\067\036\071\037\074" +
    "\001\001\000\002\001\001\000\046\016\130\017\117\020" +
    "\073\021\103\022\060\023\116\024\072\025\115\026\101" +
    "\027\105\030\065\031\112\032\102\033\061\034\106\035" +
    "\067\036\071\037\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\026" +
    "\123\027\105\030\065\031\112\032\102\033\061\034\106" +
    "\035\067\036\071\037\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\025\125\026\101" +
    "\027\105\030\065\031\112\032\102\033\061\034\106\035" +
    "\067\036\071\037\074\001\001\000\002\001\001\000\044" +
    "\017\127\020\073\021\103\022\060\023\116\024\072\025" +
    "\115\026\101\027\105\030\065\031\112\032\102\033\061" +
    "\034\106\035\067\036\071\037\074\001\001\000\002\001" +
    "\001\000\044\017\133\020\073\021\103\022\060\023\116" +
    "\024\072\025\115\026\101\027\105\030\065\031\112\032" +
    "\102\033\061\034\106\035\067\036\071\037\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\162\033\061\034\106\035\137\036\071\037\074" +
    "\001\001\000\016\032\136\033\061\034\106\035\137\036" +
    "\071\037\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\033\161\034\106\035\137\036\071\037\074\001" +
    "\001\000\014\033\160\034\106\035\137\036\071\037\074" +
    "\001\001\000\014\033\157\034\106\035\137\036\071\037" +
    "\074\001\001\000\014\033\144\034\106\035\137\036\071" +
    "\037\074\001\001\000\002\001\001\000\012\034\156\035" +
    "\137\036\071\037\074\001\001\000\012\034\147\035\137" +
    "\036\071\037\074\001\001\000\002\001\001\000\010\035" +
    "\155\036\071\037\074\001\001\000\010\035\154\036\071" +
    "\037\074\001\001\000\010\035\153\036\071\037\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\030\166\031\112\032\102\033\061\034" +
    "\106\035\137\036\071\037\074\001\001\000\002\001\001" +
    "\000\020\031\170\032\102\033\061\034\106\035\137\036" +
    "\071\037\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\025\174\026\101\027\105\030" +
    "\065\031\112\032\102\033\061\034\106\035\067\036\071" +
    "\037\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\025\201\026\101" +
    "\027\105\030\065\031\112\032\102\033\061\034\106\035" +
    "\067\036\071\037\074\001\001\000\002\001\001\000\044" +
    "\017\203\020\073\021\103\022\060\023\116\024\072\025" +
    "\115\026\101\027\105\030\065\031\112\032\102\033\061" +
    "\034\106\035\067\036\071\037\074\001\001\000\002\001" +
    "\001\000\044\017\205\020\073\021\103\022\060\023\116" +
    "\024\072\025\115\026\101\027\105\030\065\031\112\032" +
    "\102\033\061\034\106\035\067\036\071\037\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\025\215\026" +
    "\101\027\105\030\065\031\112\032\102\033\061\034\106" +
    "\035\067\036\071\037\074\001\001\000\030\025\213\026" +
    "\101\027\105\030\065\031\112\032\102\033\061\034\106" +
    "\035\067\036\071\037\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\017" +
    "\133\020\073\021\103\022\060\023\116\024\072\025\115" +
    "\026\101\027\105\030\065\031\112\032\102\033\061\034" +
    "\106\035\067\036\071\037\074\001\001\000\002\001\001" +
    "\000\026\026\223\027\105\030\065\031\112\032\102\033" +
    "\061\034\106\035\067\036\071\037\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\021" +
    "\230\025\115\026\101\027\105\030\065\031\112\032\102" +
    "\033\061\034\106\035\067\036\071\037\074\001\001\000" +
    "\032\021\246\025\115\026\101\027\105\030\065\031\112" +
    "\032\102\033\061\034\106\035\067\036\071\037\074\001" +
    "\001\000\032\021\232\025\115\026\101\027\105\030\065" +
    "\031\112\032\102\033\061\034\106\035\067\036\071\037" +
    "\074\001\001\000\030\025\240\026\101\027\105\030\065" +
    "\031\112\032\102\033\061\034\106\035\067\036\071\037" +
    "\074\001\001\000\030\025\233\026\101\027\105\030\065" +
    "\031\112\032\102\033\061\034\106\035\067\036\071\037" +
    "\074\001\001\000\002\001\001\000\044\017\235\020\073" +
    "\021\103\022\060\023\116\024\072\025\115\026\101\027" +
    "\105\030\065\031\112\032\102\033\061\034\106\035\067" +
    "\036\071\037\074\001\001\000\002\001\001\000\044\017" +
    "\237\020\073\021\103\022\060\023\116\024\072\025\115" +
    "\026\101\027\105\030\065\031\112\032\102\033\061\034" +
    "\106\035\067\036\071\037\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\017\242\020\073\021\103\022" +
    "\060\023\116\024\072\025\115\026\101\027\105\030\065" +
    "\031\112\032\102\033\061\034\106\035\067\036\071\037" +
    "\074\001\001\000\002\001\001\000\044\017\244\020\073" +
    "\021\103\022\060\023\116\024\072\025\115\026\101\027" +
    "\105\030\065\031\112\032\102\033\061\034\106\035\067" +
    "\036\071\037\074\001\001\000\002\001\001\000\030\025" +
    "\254\026\101\027\105\030\065\031\112\032\102\033\061" +
    "\034\106\035\067\036\071\037\074\001\001\000\030\025" +
    "\247\026\101\027\105\030\065\031\112\032\102\033\061" +
    "\034\106\035\067\036\071\037\074\001\001\000\002\001" +
    "\001\000\044\017\251\020\073\021\103\022\060\023\116" +
    "\024\072\025\115\026\101\027\105\030\065\031\112\032" +
    "\102\033\061\034\106\035\067\036\071\037\074\001\001" +
    "\000\002\001\001\000\044\017\253\020\073\021\103\022" +
    "\060\023\116\024\072\025\115\026\101\027\105\030\065" +
    "\031\112\032\102\033\061\034\106\035\067\036\071\037" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\017\256\020\073\021\103\022\060\023\116\024\072\025" +
    "\115\026\101\027\105\030\065\031\112\032\102\033\061" +
    "\034\106\035\067\036\071\037\074\001\001\000\002\001" +
    "\001\000\044\017\260\020\073\021\103\022\060\023\116" +
    "\024\072\025\115\026\101\027\105\030\065\031\112\032" +
    "\102\033\061\034\106\035\067\036\071\037\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void reportError(String message, Object info) {
        final StringBuffer m = new StringBuffer("Parsing error");
        if (info instanceof java_cup.runtime.Symbol) {
            final java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s.left >= 0) {
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0) {
                    m.append(", column " + (s.right + 1));
                }
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
    
    public void reportFatalError(String message, Object info) {
        reportError(message, info);
        System.exit(1);
    }
    
    public Parser(InputStream inStream) {
        this(new Yylex(inStream));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    static javac.symbol.Symbol sym(String s) {
        return javac.symbol.Symbol.valueOf(s);
    }
    
    static javac.util.Position pos(int line, int column) {
        return javac.util.Position.valueOf(line, column);
    }

  private final Parser parser;

  /** Constructor */
  CUP$parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // primary ::= NEW type_specifier LBRACKET expr RBRACKET 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArray(pos(tleft, tright), t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // primary ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 e.inBracket = 1; RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primary ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(pos(sleft, sright), s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primary ::= CHARACTER 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CharLiteral(pos(cleft, cright), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primary ::= INTEGER 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(pos(ileft, iright), i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primary ::= NULL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Null(pos(nleft, nright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primary ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Id(pos(ileft, iright), sym(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // postfix ::= postfix DOT ID 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldPostfix(pos(pleft, pright), p, sym(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // postfix ::= postfix LPAREN RPAREN 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunctionCall(pos(pleft, pright), p, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // postfix ::= postfix LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCall(pos(pleft, pright), p, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // postfix ::= postfix LBRACKET expr RBRACKET 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SubscriptPostfix(pos(pleft, pright), p, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // postfix ::= primary 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary_expr ::= NOT unary_expr 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr(pos(nleft, nright), UnaryOp.NOT, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unary_expr ::= MINUS unary_expr 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr(pos(mleft, mright), UnaryOp.MINUS, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unary_expr ::= PLUS unary_expr 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr(pos(pleft, pright), UnaryOp.PLUS, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unary_expr ::= NEW ID 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NewRecord(pos(nleft,nright), new IdType(pos(ileft,iright),sym(i))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unary_expr ::= postfix 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // mult_expr ::= mult_expr MODULO unary_expr 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(mleft, mright), m, BinaryOp.MODULO, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mult_expr ::= mult_expr DIVIDE unary_expr 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(mleft, mright), m, BinaryOp.DIVIDE, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mult_expr ::= mult_expr MULTIPLY unary_expr 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(mleft, mright), m, BinaryOp.MULTIPLY, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // mult_expr ::= unary_expr 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // additive_expr ::= additive_expr MINUS mult_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft, aright), a, BinaryOp.MINUS, m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // additive_expr ::= additive_expr PLUS mult_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft, aright), a, BinaryOp.PLUS, m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // additive_expr ::= mult_expr 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relational_expr ::= relational_expr GREATER_EQ additive_expr 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(rleft, rright), r, BinaryOp.GREATER_EQ, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relational_expr ::= relational_expr GREATER additive_expr 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(rleft, rright), r, BinaryOp.GREATER, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relational_expr ::= relational_expr LESS_EQ additive_expr 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(rleft, rright), r, BinaryOp.LESS_EQ, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relational_expr ::= relational_expr LESS additive_expr 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(rleft, rright), r, BinaryOp.LESS, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relational_expr ::= additive_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // equality_expr ::= equality_expr NEQ relational_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(eleft, eright), e, BinaryOp.NEQ, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // equality_expr ::= equality_expr EQ relational_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(eleft, eright), e, BinaryOp.EQ, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // equality_expr ::= relational_expr 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logical_and_expr ::= logical_and_expr AND equality_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(lleft, lright), l, BinaryOp.AND, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_and_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logical_and_expr ::= equality_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_and_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logical_or_expr ::= logical_or_expr OR logical_and_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr lt = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(lleft, lright), l, BinaryOp.OR, lt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_or_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logical_or_expr ::= logical_and_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_or_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment_expr ::= unary_expr ASSIGN assignment_expr 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(uleft, uright), u, BinaryOp.ASSIGN, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment_expr ::= logical_or_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr COMMA assignment_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr et = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(eleft, eright), e, BinaryOp.COMMA, et); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= assignment_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // jump_stmt ::= CONTINUE SEMICOLON 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ContinueStmt(pos(cleft, cright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // jump_stmt ::= BREAK SEMICOLON 
            {
              Stmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BreakStmt(pos(bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // jump_stmt ::= RETURN expr SEMICOLON 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmt(pos(rleft, rright), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // iteration_stmt ::= FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt(pos(fleft, fright), null, null, null, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // iteration_stmt ::= FOR LPAREN SEMICOLON SEMICOLON expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt(pos(fleft, fright), null, null, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // iteration_stmt ::= FOR LPAREN SEMICOLON expr_stmt RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprStmt e = (ExprStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt(pos(fleft, fright), null, e.getExpr(), null, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // iteration_stmt ::= FOR LPAREN SEMICOLON expr_stmt expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprStmt e = (ExprStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr et = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt(pos(fleft, fright), null, e.getExpr(), et, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // iteration_stmt ::= FOR LPAREN expr_stmt SEMICOLON RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprStmt e = (ExprStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt(pos(fleft, fright), e.getExpr(), null, null, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // iteration_stmt ::= FOR LPAREN expr_stmt SEMICOLON expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprStmt e = (ExprStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr et = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt(pos(fleft, fright), e.getExpr(), null, et, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // iteration_stmt ::= FOR LPAREN expr_stmt expr_stmt RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprStmt e = (ExprStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprStmt et = (ExprStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt(pos(fleft, fright), e.getExpr(), et.getExpr(), null, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // iteration_stmt ::= FOR LPAREN expr_stmt expr_stmt expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprStmt e = (ExprStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprStmt et = (ExprStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ethleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ethright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr eth = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt(pos(fleft, fright), e.getExpr(), et.getExpr(), eth, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // iteration_stmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStmt(pos(wleft, wright), e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // selection_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              IfStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(pos(ileft, iright), e, s, st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // selection_stmt ::= IF LPAREN expr RPAREN stmt 
            {
              IfStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(pos(ileft, iright), e, s, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_stmt ::= expr SEMICOLON 
            {
              ExprStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprStmt(pos(eleft, eright), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // compound_stmt ::= LBRACE RBRACE 
            {
              CompoundStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CompoundStmt(pos(lleft, lright), new StmtList(pos(lleft,lright))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // compound_stmt ::= LBRACE stmt_list RBRACE 
            {
              CompoundStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CompoundStmt(pos(lleft, lright), s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= jump_stmt 
            {
              Stmt RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt j = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = j; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= iteration_stmt 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt i = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= selection_stmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStmt s = (IfStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= expr_stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprStmt e = (ExprStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= compound_stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt c = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt_list ::= stmt_list stmt 
            {
              StmtList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sl; RESULT.add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt_list ::= stmt 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtList(pos(sleft, sright)); RESULT.add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id_list ::= id_list COMMA ID 
            {
              IdList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdList il = (IdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = il; RESULT.add(sym(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // id_list ::= ID 
            {
              IdList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdList(pos(ileft, iright)); RESULT.add(sym(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_specifier ::= type_specifier LRBRACKET 
            {
              TypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayType(pos(tleft,tright), t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_specifier ::= ID 
            {
              TypeSpecifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdType(pos(ileft,iright), sym(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_specifier ::= CHAR 
            {
              TypeSpecifier RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CharType(pos(cleft, cright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_specifier ::= STRING 
            {
              TypeSpecifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringType(pos(sleft, sright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_specifier ::= INT 
            {
              TypeSpecifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntType(pos(ileft, iright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable_decl ::= type_specifier id_list SEMICOLON 
            {
              VariableDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdList i = (IdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VariableDecl(pos(tleft, tright), t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameter_decl ::= type_specifier ID 
            {
              ParameterDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParameterDecl(pos(tleft, tright), t, sym(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameter_list ::= parameter_list COMMA parameter_decl 
            {
              ParameterList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterList pl = (ParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParameterDecl p = (ParameterDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pl; RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter_list ::= parameter_decl 
            {
              ParameterList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParameterDecl p = (ParameterDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParameterList(pos(pleft, pright)); RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_head ::= type_specifier ID LPAREN RPAREN 
            {
              FunctionHead RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunctionHead(pos(tleft, tright), t, sym(i), new ParameterList(pos(ileft, iright))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_head ::= type_specifier ID LPAREN parameter_list RPAREN 
            {
              FunctionHead RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParameterList p = (ParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionHead(pos(tleft, tright), t, sym(i), p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_decl_list ::= variable_decl_list variable_decl 
            {
              VariableDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDeclList v = (VariableDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDecl va = (VariableDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; v.add(va); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_decl_list ::= variable_decl 
            {
              VariableDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDecl v = (VariableDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableDeclList(pos(vleft, vright)); RESULT.add(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // record_def ::= RECORD ID LBRACE variable_decl_list RBRACE 
            {
              RecordDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDeclList v = (VariableDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordDef(pos(rleft, rright), sym(i), v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_def ::= function_head LBRACE stmt_list RBRACE 
            {
              FunctionDef RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FunctionHead f = (FunctionHead)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionDef(pos(fleft, fright), f, new VariableDeclList(pos(sleft, sright)), s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_def",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_def ::= function_head LBRACE variable_decl_list stmt_list RBRACE 
            {
              FunctionDef RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FunctionHead f = (FunctionHead)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclList v = (VariableDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionDef(pos(fleft, fright), f, v, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_def",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // prototype_decl ::= NATIVE function_head SEMICOLON 
            {
              PrototypeDecl RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionHead f = (FunctionHead)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PrototypeDecl(pos(nleft, nright), f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prototype_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // external_decl ::= record_def 
            {
              ExternalDecl RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordDef r = (RecordDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_decl ::= function_def 
            {
              ExternalDecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDef f = (FunctionDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // external_decl ::= prototype_decl 
            {
              ExternalDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrototypeDecl p = (PrototypeDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // translation_unit ::= translation_unit external_decl 
            {
              TranslationUnit RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TranslationUnit t = (TranslationUnit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExternalDecl e = (ExternalDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; t.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("translation_unit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // translation_unit ::= external_decl 
            {
              TranslationUnit RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExternalDecl e = (ExternalDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TranslationUnit(pos(eleft, eright)); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("translation_unit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TranslationUnit start_val = (TranslationUnit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

